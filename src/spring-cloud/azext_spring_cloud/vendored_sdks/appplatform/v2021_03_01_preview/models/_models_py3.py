# coding=utf-8
# --------------------------------------------------------------------------
# Copyright (c) Microsoft Corporation. All rights reserved.
# Licensed under the MIT License. See License.txt in the project root for
# license information.
#
# Code generated by Microsoft (R) AutoRest Code Generator.
# Changes may cause incorrect behavior and will be lost if the code is
# regenerated.
# --------------------------------------------------------------------------

from msrest.serialization import Model
from msrest.exceptions import HttpOperationError


class AddonProfile(Model):
    """Deployment addon profile.

    :param enabled: Whether the add-on is enabled or not
    :type enabled: bool
    :param properties: Key-value pairs for configurations of add-on
    :type properties: dict[str, str]
    """

    _attribute_map = {
        'enabled': {'key': 'enabled', 'type': 'bool'},
        'properties': {'key': 'properties', 'type': '{str}'},
    }

    def __init__(self, *, enabled: bool=None, properties=None, **kwargs) -> None:
        super(AddonProfile, self).__init__(**kwargs)
        self.enabled = enabled
        self.properties = properties


class Resource(Model):
    """The core properties of ARM resources.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(Resource, self).__init__(**kwargs)
        self.id = None
        self.name = None
        self.type = None


class ProxyResource(Resource):
    """The resource model definition for a ARM proxy resource. It will have
    everything other than required location and tags.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(ProxyResource, self).__init__(**kwargs)


class AppResource(ProxyResource):
    """App resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the App resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AppResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'AppResourceProperties'},
    }

    def __init__(self, *, properties=None, **kwargs) -> None:
        super(AppResource, self).__init__(**kwargs)
        self.properties = properties


class AppResourceProperties(Model):
    """App resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param public: Indicates whether the App exposes public endpoint
    :type public: bool
    :ivar url: URL of the App
    :vartype url: str
    :param addon_config: Collection of addons
    :type addon_config: dict[str,
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AddonProfile]
    :ivar provisioning_state: Provisioning state of the App. Possible values
     include: 'Succeeded', 'Failed', 'Creating', 'Updating'
    :vartype provisioning_state: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AppResourceProvisioningState
    """

    _validation = {
        'url': {'readonly': True},
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'public': {'key': 'public', 'type': 'bool'},
        'url': {'key': 'url', 'type': 'str'},
        'addon_config': {'key': 'addonConfig', 'type': '{AddonProfile}'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, *, public: bool=None, addon_config=None, **kwargs) -> None:
        super(AppResourceProperties, self).__init__(**kwargs)
        self.public = public
        self.url = None
        self.addon_config = addon_config
        self.provisioning_state = None


class CloudError(Model):
    """An error response from the service.

    :param error: An error response from the service.
    :type error:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.CloudErrorBody
    """

    _attribute_map = {
        'error': {'key': 'error', 'type': 'CloudErrorBody'},
    }

    def __init__(self, *, error=None, **kwargs) -> None:
        super(CloudError, self).__init__(**kwargs)
        self.error = error


class CloudErrorException(HttpOperationError):
    """Server responsed with exception of type: 'CloudError'.

    :param deserialize: A deserializer
    :param response: Server response to be deserialized.
    """

    def __init__(self, deserialize, response, *args):

        super(CloudErrorException, self).__init__(deserialize, response, 'CloudError', *args)


class CloudErrorBody(Model):
    """An error response from the service.

    :param code: An identifier for the error. Codes are invariant and are
     intended to be consumed programmatically.
    :type code: str
    :param message: A message describing the error, intended to be suitable
     for display in a user interface.
    :type message: str
    :param target: The target of the particular error. For example, the name
     of the property in error.
    :type target: str
    :param details: A list of additional details about the error.
    :type details:
     list[~azure.mgmt.appplatform.v2021_03_01_preview.models.CloudErrorBody]
    """

    _attribute_map = {
        'code': {'key': 'code', 'type': 'str'},
        'message': {'key': 'message', 'type': 'str'},
        'target': {'key': 'target', 'type': 'str'},
        'details': {'key': 'details', 'type': '[CloudErrorBody]'},
    }

    def __init__(self, *, code: str=None, message: str=None, target: str=None, details=None, **kwargs) -> None:
        super(CloudErrorBody, self).__init__(**kwargs)
        self.code = code
        self.message = message
        self.target = target
        self.details = details


class DeploymentInstance(Model):
    """Deployment instance payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar name: Name of the deployment instance
    :vartype name: str
    :ivar status: Status of the deployment instance
    :vartype status: str
    :ivar deployed_time: Deployed time of the deployment instance
    :vartype deployed_time: str
    """

    _validation = {
        'name': {'readonly': True},
        'status': {'readonly': True},
        'deployed_time': {'readonly': True},
    }

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'deployed_time': {'key': 'deployedTime', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(DeploymentInstance, self).__init__(**kwargs)
        self.name = None
        self.status = None
        self.deployed_time = None


class DeploymentResource(ProxyResource):
    """Deployment resource payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param properties: Properties of the Deployment resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentResourceProperties
    :param sku: Sku of the Deployment resource
    :type sku: ~azure.mgmt.appplatform.v2021_03_01_preview.models.Sku
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'properties': {'key': 'properties', 'type': 'DeploymentResourceProperties'},
        'sku': {'key': 'sku', 'type': 'Sku'},
    }

    def __init__(self, *, properties=None, sku=None, **kwargs) -> None:
        super(DeploymentResource, self).__init__(**kwargs)
        self.properties = properties
        self.sku = sku


class DeploymentResourceProperties(Model):
    """Deployment resource properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :param source: Uploaded source information of the deployment.
    :type source:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.UserSourceInfo
    :param deployment_settings: Deployment settings of the Deployment
    :type deployment_settings:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentSettings
    :ivar provisioning_state: Provisioning state of the Deployment. Possible
     values include: 'Creating', 'Updating', 'Succeeded', 'Failed'
    :vartype provisioning_state: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentResourceProvisioningState
    :ivar status: Status of the Deployment. Possible values include:
     'Stopped', 'Running'
    :vartype status: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentResourceStatus
    :ivar instances: Collection of instances belong to the Deployment
    :vartype instances:
     list[~azure.mgmt.appplatform.v2021_03_01_preview.models.DeploymentInstance]
    """

    _validation = {
        'provisioning_state': {'readonly': True},
        'status': {'readonly': True},
        'instances': {'readonly': True},
    }

    _attribute_map = {
        'source': {'key': 'source', 'type': 'UserSourceInfo'},
        'deployment_settings': {'key': 'deploymentSettings', 'type': 'DeploymentSettings'},
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
        'status': {'key': 'status', 'type': 'str'},
        'instances': {'key': 'instances', 'type': '[DeploymentInstance]'},
    }

    def __init__(self, *, source=None, deployment_settings=None, **kwargs) -> None:
        super(DeploymentResourceProperties, self).__init__(**kwargs)
        self.source = source
        self.deployment_settings = deployment_settings
        self.provisioning_state = None
        self.status = None
        self.instances = None


class DeploymentSettings(Model):
    """Deployment settings payload.

    :param cpu: Required CPU, basic tier should be 1, standard tier should be
     in range (1, 4)
    :type cpu: str
    :param memory: Required Memory, (1Gi, 2Gi, ..., 8Gi) for Tanzu
    :type memory: str
    :param environment_variables: Collection of environment variables
    :type environment_variables: dict[str, str]
    :param serve_traffic: Indicates whether the Deployment serves traffic for
     App
    :type serve_traffic: bool
    :param addon_config: Collection of addons
    :type addon_config: dict[str,
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.AddonProfile]
    """

    _attribute_map = {
        'cpu': {'key': 'cpu', 'type': 'str'},
        'memory': {'key': 'memory', 'type': 'str'},
        'environment_variables': {'key': 'environmentVariables', 'type': '{str}'},
        'serve_traffic': {'key': 'serveTraffic', 'type': 'bool'},
        'addon_config': {'key': 'addonConfig', 'type': '{AddonProfile}'},
    }

    def __init__(self, *, cpu: str=None, memory: str=None, environment_variables=None, serve_traffic: bool=None, addon_config=None, **kwargs) -> None:
        super(DeploymentSettings, self).__init__(**kwargs)
        self.cpu = cpu
        self.memory = memory
        self.environment_variables = environment_variables
        self.serve_traffic = serve_traffic
        self.addon_config = addon_config


class ResourceUploadDefinition(Model):
    """Resource upload definition payload.

    :param relative_path: Source relative path
    :type relative_path: str
    :param upload_url: Upload URL
    :type upload_url: str
    """

    _attribute_map = {
        'relative_path': {'key': 'relativePath', 'type': 'str'},
        'upload_url': {'key': 'uploadUrl', 'type': 'str'},
    }

    def __init__(self, *, relative_path: str=None, upload_url: str=None, **kwargs) -> None:
        super(ResourceUploadDefinition, self).__init__(**kwargs)
        self.relative_path = relative_path
        self.upload_url = upload_url


class Sku(Model):
    """Sku of Azure Spring Cloud Tanzu.

    :param name: Name of the Sku. Default value: "S0" .
    :type name: str
    :param tier: Tier of the Sku. Default value: "Standard" .
    :type tier: str
    :param capacity: Current capacity of the target resource
    :type capacity: int
    """

    _attribute_map = {
        'name': {'key': 'name', 'type': 'str'},
        'tier': {'key': 'tier', 'type': 'str'},
        'capacity': {'key': 'capacity', 'type': 'int'},
    }

    def __init__(self, *, name: str="S0", tier: str="Standard", capacity: int=None, **kwargs) -> None:
        super(Sku, self).__init__(**kwargs)
        self.name = name
        self.tier = tier
        self.capacity = capacity


class TrackedResource(Resource):
    """The resource model definition for a ARM tracked top level resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The GEO location of the resource.
    :type location: str
    :param tags: Tags of the service which is a list of key value pairs that
     describe the resource.
    :type tags: dict[str, str]
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
    }

    def __init__(self, *, location: str=None, tags=None, **kwargs) -> None:
        super(TrackedResource, self).__init__(**kwargs)
        self.location = location
        self.tags = tags


class TanzuClusterResource(TrackedResource):
    """Tanzu Service resource.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar id: Fully qualified resource Id for the resource.
    :vartype id: str
    :ivar name: The name of the resource.
    :vartype name: str
    :ivar type: The type of the resource.
    :vartype type: str
    :param location: The GEO location of the resource.
    :type location: str
    :param tags: Tags of the service which is a list of key value pairs that
     describe the resource.
    :type tags: dict[str, str]
    :param properties: Properties of the Service resource
    :type properties:
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.TanzuClusterResourceProperties
    """

    _validation = {
        'id': {'readonly': True},
        'name': {'readonly': True},
        'type': {'readonly': True},
    }

    _attribute_map = {
        'id': {'key': 'id', 'type': 'str'},
        'name': {'key': 'name', 'type': 'str'},
        'type': {'key': 'type', 'type': 'str'},
        'location': {'key': 'location', 'type': 'str'},
        'tags': {'key': 'tags', 'type': '{str}'},
        'properties': {'key': 'properties', 'type': 'TanzuClusterResourceProperties'},
    }

    def __init__(self, *, location: str=None, tags=None, properties=None, **kwargs) -> None:
        super(TanzuClusterResource, self).__init__(location=location, tags=tags, **kwargs)
        self.properties = properties


class TanzuClusterResourceProperties(Model):
    """Tanzu Service properties payload.

    Variables are only populated by the server, and will be ignored when
    sending a request.

    :ivar provisioning_state: Provisioning state of the Service. Possible
     values include: 'Creating', 'Updating', 'Deleting', 'Deleted',
     'Succeeded', 'Failed', 'Moving', 'Moved', 'MoveFailed'
    :vartype provisioning_state: str or
     ~azure.mgmt.appplatform.v2021_03_01_preview.models.ProvisioningState
    """

    _validation = {
        'provisioning_state': {'readonly': True},
    }

    _attribute_map = {
        'provisioning_state': {'key': 'provisioningState', 'type': 'str'},
    }

    def __init__(self, **kwargs) -> None:
        super(TanzuClusterResourceProperties, self).__init__(**kwargs)
        self.provisioning_state = None


class UserSourceInfo(Model):
    """Source information for a deployment.

    :param build_iteration_id: Resource id of a succeeded build iteration to
     deploy to this deployment.
    :type build_iteration_id: str
    """

    _attribute_map = {
        'build_iteration_id': {'key': 'buildIterationId', 'type': 'str'},
    }

    def __init__(self, *, build_iteration_id: str=None, **kwargs) -> None:
        super(UserSourceInfo, self).__init__(**kwargs)
        self.build_iteration_id = build_iteration_id
